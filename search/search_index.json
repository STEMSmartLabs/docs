{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"STEM Smart Labs \u2014 Product Documentation","text":"<p>Find setup guides, examples, downloads, and troubleshooting for your kits.</p>"},{"location":"products/arduino-ek-r4-ai-iot-kit/","title":"Arduino EK R4 AI IoT Kit","text":"<p>Build connected and intelligent projects with UNO R4 WiFi. Send data to the cloud, toggle devices from dashboards, and run simple TinyML models.</p>"},{"location":"products/arduino-ek-r4-ai-iot-kit/#breadboarding-example","title":"Breadboarding example","text":""},{"location":"products/arduino-ek-r4-ai-iot-kit/downloads/","title":"Downloads","text":"<ul> <li>Repo: https://github.com/STEMSmartLabs/Arduino-EK-AI-IoT-Kit</li> </ul>"},{"location":"products/arduino-ek-r4-ai-iot-kit/troubleshooting/","title":"Troubleshooting","text":"<ul> <li>WiFi: ensure 2.4 GHz; hotspots help</li> <li>IoT Cloud: device online, credentials</li> <li>TinyML: sampling/window match training</li> </ul>"},{"location":"products/arduino-ek-r4-ai-iot-kit/examples/edge-impulse-vibration/","title":"Edge Impulse: Vibration Classifier","text":"<p>Train a TinyML model for vibration patterns and deploy as an Arduino library.</p>"},{"location":"products/arduino-ek-r4-ai-iot-kit/examples/edge-impulse-vibration/#wiring","title":"Wiring","text":"<ul> <li>Sensor SIG\u2192A0, 5V, GND</li> </ul>"},{"location":"products/arduino-ek-r4-ai-iot-kit/examples/edge-impulse-vibration/#code","title":"Code","text":"<pre><code>// Skeleton: sample A0 @100 Hz and run classifier()\n#include &lt;your_edge_impulse_inference.h&gt;\n\nvoid setup() { Serial.begin(115200); }\n\nvoid loop() {\n  // Fill signal buffer from analogRead(A0) ...\n  // ei_impulse_result_t result = run_classifier(&amp;signal, &amp;result, false);\n  // if (result.classification[0].value &gt; 0.8) { /* act */ }\n}\n</code></pre>"},{"location":"products/arduino-ek-r4-ai-iot-kit/examples/iot-cloud-toggle/","title":"IoT Cloud LED Toggle","text":"<p>Control an LED from Arduino IoT Cloud.</p>"},{"location":"products/arduino-ek-r4-ai-iot-kit/examples/iot-cloud-toggle/#wiring","title":"Wiring","text":"<ul> <li>LED on D3 (or onboard LED if present)</li> </ul>"},{"location":"products/arduino-ek-r4-ai-iot-kit/examples/iot-cloud-toggle/#code","title":"Code","text":"<pre><code>// Add to the sketch generated by Arduino IoT Cloud\nvoid onLedChange() {\n  pinMode(3, OUTPUT);\n  digitalWrite(3, led ? HIGH : LOW);\n}\n</code></pre>"},{"location":"products/arduino-ek-r4-ai-iot-kit/examples/mqtt-basic/","title":"MQTT Publish/Subscribe","text":"<p>Send telemetry and handle a simple LED command via MQTT.</p>"},{"location":"products/arduino-ek-r4-ai-iot-kit/examples/mqtt-basic/#wiring","title":"Wiring","text":"<ul> <li>Broker: <code>test.mosquitto.org</code> (demo)</li> </ul>"},{"location":"products/arduino-ek-r4-ai-iot-kit/examples/mqtt-basic/#code","title":"Code","text":"<pre><code>#include &lt;WiFiS3.h&gt;\n#include &lt;PubSubClient.h&gt;\n\nWiFiClient net;\nPubSubClient mqtt(net);\n\nconst char* ssid = \"YOUR_SSID\";\nconst char* pass = \"YOUR_PASS\";\n\nconst char* host = \"test.mosquitto.org\";\nconst int   port = 1883;\n\nconst char* pubTopic = \"stemsl/telemetry\";\nconst char* subTopic = \"stemsl/cmd\";\n\nvoid onMsg(char* topic, byte* payload, unsigned int len) {\n  String s;\n  for (unsigned int i = 0; i &lt; len; i++) s += (char)payload[i];\n  if (s == \"led:on\")  { pinMode(3, OUTPUT); digitalWrite(3, HIGH); }\n  if (s == \"led:off\") { digitalWrite(3, LOW); }\n}\n\nvoid setup() {\n  Serial.begin(115200);\n  WiFi.begin(ssid, pass);\n  while (WiFi.status() != WL_CONNECTED) { delay(500); }\n  mqtt.setServer(host, port);\n  mqtt.setCallback(onMsg);\n}\n\nvoid loop() {\n  if (!mqtt.connected()) {\n    if (mqtt.connect(\"stemsl-ekr4\")) mqtt.subscribe(subTopic);\n  }\n  mqtt.loop();\n\n  static unsigned long t = 0;\n  if (millis() - t &gt; 2000) {\n    t = millis();\n    int v = analogRead(A0);\n    String msg = String(\"{\"a0\":\") + v + \"}\";\n    mqtt.publish(pubTopic, msg.c_str());\n  }\n}\n</code></pre>"},{"location":"products/arduino-ek-r4-ai-iot-kit/examples/wifi-connect/","title":"WiFi Connect &amp; Ping","text":"<p>Connect to WiFi, print IP, and ping a host.</p>"},{"location":"products/arduino-ek-r4-ai-iot-kit/examples/wifi-connect/#wiring","title":"Wiring","text":"<ul> <li>Update <code>ssid</code> / <code>pass</code> before uploading.</li> </ul>"},{"location":"products/arduino-ek-r4-ai-iot-kit/examples/wifi-connect/#code","title":"Code","text":"<pre><code>#include &lt;WiFiS3.h&gt;\n\nconst char* ssid = \"YOUR_SSID\";\nconst char* pass = \"YOUR_PASS\";\n\nvoid setup() {\n  Serial.begin(115200);\n  Serial.print(\"Connecting to \");\n  Serial.println(ssid);\n\n  if (WiFi.begin(ssid, pass) != WL_CONNECTED) {\n    Serial.println(\"WiFi connect failed\");\n    return;\n  }\n\n  Serial.print(\"Connected! IP: \");\n  Serial.println(WiFi.localIP());\n}\n\nvoid loop() {\n  static unsigned long t = 0;\n  if (millis() - t &gt; 3000) {\n    t = millis();\n    int r = WiFi.ping(\"8.8.8.8\");\n    Serial.print(\"Ping: \");\n    Serial.println(r);\n  }\n}\n</code></pre>"},{"location":"products/arduino-ek-r4-ai-iot-kit/setup/arduino-cloud/","title":"Arduino IoT Cloud","text":"<p>Create a Thing, add variables (e.g., <code>bool led</code>, <code>float temperature</code>), generate sketch, upload, and control from the dashboard.</p>"},{"location":"products/arduino-ek-r4-ai-iot-kit/setup/libraries/","title":"Libraries","text":"<ul> <li>WiFiS3</li> <li>ArduinoIoTCloud, Arduino_ConnectionHandler</li> <li>PubSubClient (MQTT)</li> <li>Adafruit NeoPixel / U8g2 / DHT</li> </ul>"},{"location":"products/arduino-ek-r4-ai-iot-kit/setup/quick-start/","title":"Quick Start","text":"<ol> <li>Install Arduino IDE 2.x; connect the board via USB.</li> <li>Select Board: Arduino UNO R4 WiFi and the correct Port.</li> <li>Upload WiFiScan (WiFiS3 examples) to verify WiFi.</li> </ol>"},{"location":"products/arduino-ek-r4-experiment-kit/","title":"Arduino EK R4 Experiment Kit","text":"<p>A classroom\u2011ready board with OLED, NeoPixel ring, Ultrasonic, DHT11, Servo, Fan, Buttons/Switch, and Grove external ports\u2014so you can prototype 50+ projects quickly.</p>"},{"location":"products/arduino-ek-r4-experiment-kit/#watch-the-module-playlist","title":"Watch the module playlist","text":""},{"location":"products/arduino-ek-r4-experiment-kit/#featured-project-videos","title":"Featured project videos","text":""},{"location":"products/arduino-ek-r4-experiment-kit/#modules-tutorials","title":"Modules &amp; Tutorials","text":"<p>Links to example code and videos from the repository README.</p> Module Code Video Servo View Code Watch NeoPixel View Code Watch DHT11 View Code Watch Ultrasonic View Code Watch OLED View Code Watch <p>Full list in the repo README.</p>"},{"location":"products/arduino-ek-r4-experiment-kit/#external-grove-ports","title":"External Grove Ports","text":"<p>Use the four Grove ports to connect your own sensors (I2C/UART/Analog).</p>"},{"location":"products/arduino-ek-r4-experiment-kit/downloads/","title":"Downloads","text":"<ul> <li>Repo: https://github.com/STEMSmartLabs/Arduino-EK-R4-Experiment-Kit</li> </ul>"},{"location":"products/arduino-ek-r4-experiment-kit/troubleshooting/","title":"Troubleshooting","text":"<ul> <li>Board/cable/port, drivers on Windows</li> <li>Close other serial monitors; reset if needed</li> </ul>"},{"location":"products/arduino-ek-r4-experiment-kit/examples/blink-led/","title":"Blink LED","text":"<p>Blink an LED on D3.</p>"},{"location":"products/arduino-ek-r4-experiment-kit/examples/blink-led/#wiring","title":"Wiring","text":"<ul> <li>D3 \u2192 resistor \u2192 LED \u2192 GND</li> </ul>"},{"location":"products/arduino-ek-r4-experiment-kit/examples/blink-led/#code","title":"Code","text":"<pre><code>const int LED = 3;\n\nvoid setup() {\n  pinMode(LED, OUTPUT);\n}\n\nvoid loop() {\n  digitalWrite(LED, HIGH);\n  delay(500);\n  digitalWrite(LED, LOW);\n  delay(500);\n}\n</code></pre>"},{"location":"products/arduino-ek-r4-experiment-kit/examples/buttons-switch/","title":"Button &amp; Switch Input","text":"<p>Read a momentary button on D12.</p>"},{"location":"products/arduino-ek-r4-experiment-kit/examples/buttons-switch/#wiring","title":"Wiring","text":"<ul> <li>Button\u2192D12 to GND with INPUT_PULLUP</li> </ul>"},{"location":"products/arduino-ek-r4-experiment-kit/examples/buttons-switch/#code","title":"Code","text":"<pre><code>void setup() {\n  Serial.begin(115200);\n  pinMode(12, INPUT_PULLUP);\n}\n\nvoid loop() {\n  bool pressed = (digitalRead(12) == LOW);\n  Serial.print(\"Button pressed: \");\n  Serial.println(pressed ? \"YES\" : \"NO\");\n  delay(200);\n}\n</code></pre>"},{"location":"products/arduino-ek-r4-experiment-kit/examples/buzzer-tones/","title":"Buzzer Tones","text":"<p>Play tones on a passive buzzer.</p>"},{"location":"products/arduino-ek-r4-experiment-kit/examples/buzzer-tones/#wiring","title":"Wiring","text":"<ul> <li>+ \u2192 D11, \u2212 \u2192 GND</li> </ul>"},{"location":"products/arduino-ek-r4-experiment-kit/examples/buzzer-tones/#code","title":"Code","text":"<pre><code>#define BUZZ 11\n\nvoid setup() { pinMode(BUZZ, OUTPUT); }\n\nvoid play(int f, int ms) { tone(BUZZ, f, ms); delay(ms + 20); }\n\nvoid loop() {\n  play(440, 250);\n  play(660, 250);\n  play(880, 250);\n  delay(500);\n}\n</code></pre>"},{"location":"products/arduino-ek-r4-experiment-kit/examples/dht11/","title":"DHT11 Temperature &amp; Humidity","text":"<p>Read ambient temperature and humidity.</p>"},{"location":"products/arduino-ek-r4-experiment-kit/examples/dht11/#wiring","title":"Wiring","text":"<ul> <li>DHT11 OUT\u2192D8; VCC\u21925V; GND\u2192GND</li> </ul>"},{"location":"products/arduino-ek-r4-experiment-kit/examples/dht11/#code","title":"Code","text":"<pre><code>#include &lt;DHT.h&gt;\n\n#define DHTPIN 8\n#define DHTTYPE DHT11\n\nDHT dht(DHTPIN, DHTTYPE);\n\nvoid setup() {\n  Serial.begin(115200);\n  dht.begin();\n}\n\nvoid loop() {\n  float h = dht.readHumidity();\n  float t = dht.readTemperature();\n  if (isnan(h) || isnan(t)) {\n    Serial.println(\"Sensor error\");\n    delay(2000);\n    return;\n  }\n  Serial.print(\"T: \"); Serial.print(t);\n  Serial.print(\" C  H: \"); Serial.println(h);\n  delay(2000);\n}\n</code></pre>"},{"location":"products/arduino-ek-r4-experiment-kit/examples/ir-remote/","title":"IR Remote Decode","text":"<p>Read codes from the IR receiver.</p>"},{"location":"products/arduino-ek-r4-experiment-kit/examples/ir-remote/#wiring","title":"Wiring","text":"<ul> <li>OUT\u2192D6 (example), VCC\u21925V, GND\u2192GND</li> </ul>"},{"location":"products/arduino-ek-r4-experiment-kit/examples/ir-remote/#code","title":"Code","text":"<pre><code>#include &lt;IRremote.h&gt;\n\nconst int RECV_PIN = 6;\n\nvoid setup() {\n  Serial.begin(115200);\n  IrReceiver.begin(RECV_PIN, ENABLE_LED_FEEDBACK);\n}\n\nvoid loop() {\n  if (IrReceiver.decode()) {\n    Serial.println(IrReceiver.decodedIRData.decodedRawData, HEX);\n    IrReceiver.resume();\n  }\n}\n</code></pre>"},{"location":"products/arduino-ek-r4-experiment-kit/examples/neopixel/","title":"NeoPixel Ring Patterns","text":"<p>Animate the 8\u2011LED ring on D5.</p>"},{"location":"products/arduino-ek-r4-experiment-kit/examples/neopixel/#wiring","title":"Wiring","text":"<ul> <li>DIN\u2192D5, VCC\u21925V, GND\u2192GND</li> </ul>"},{"location":"products/arduino-ek-r4-experiment-kit/examples/neopixel/#code","title":"Code","text":"<pre><code>#include &lt;Adafruit_NeoPixel.h&gt;\n\n#define PIN 5\n#define N   8\n\nAdafruit_NeoPixel strip(N, PIN, NEO_GRB + NEO_KHZ800);\n\nvoid setup() {\n  strip.begin();\n  strip.show();\n}\n\nvoid colorWipe(uint32_t c, uint8_t wait) {\n  for (int i = 0; i &lt; N; i++) {\n    strip.setPixelColor(i, c);\n    strip.show();\n    delay(wait);\n  }\n}\n\nvoid loop() {\n  colorWipe(strip.Color(255, 0, 0), 50);\n  colorWipe(strip.Color(0, 255, 0), 50);\n  colorWipe(strip.Color(0, 0, 255), 50);\n}\n</code></pre>"},{"location":"products/arduino-ek-r4-experiment-kit/examples/oled-hello/","title":"OLED Hello","text":"<p>Display text on the I2C OLED.</p>"},{"location":"products/arduino-ek-r4-experiment-kit/examples/oled-hello/#wiring","title":"Wiring","text":"<ul> <li>VCC\u21925V, GND\u2192GND, SCL\u2192SCL, SDA\u2192SDA</li> </ul>"},{"location":"products/arduino-ek-r4-experiment-kit/examples/oled-hello/#code","title":"Code","text":"<pre><code>#include &lt;U8g2lib.h&gt;\n\nU8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0);\n\nvoid setup() {\n  u8g2.begin();\n}\n\nvoid loop() {\n  u8g2.clearBuffer();\n  u8g2.setFont(u8g2_font_ncenB08_tr);\n  u8g2.drawStr(0, 24, \"Hello EK R4!\");\n  u8g2.sendBuffer();\n  delay(1000);\n}\n</code></pre>"},{"location":"products/arduino-ek-r4-experiment-kit/examples/servo-sweep/","title":"Servo Sweep","text":"<p>Sweep a micro servo on D9.</p>"},{"location":"products/arduino-ek-r4-experiment-kit/examples/servo-sweep/#wiring","title":"Wiring","text":"<ul> <li>Signal\u2192D9, VCC\u21925V, GND\u2192GND</li> </ul>"},{"location":"products/arduino-ek-r4-experiment-kit/examples/servo-sweep/#code","title":"Code","text":"<pre><code>#include &lt;Servo.h&gt;\n\nServo s;\n\nvoid setup() { s.attach(9); }\n\nvoid loop() {\n  for (int a = 0; a &lt;= 180; a += 2) { s.write(a); delay(15); }\n  for (int a = 180; a &gt;= 0; a -= 2) { s.write(a); delay(15); }\n}\n</code></pre>"},{"location":"products/arduino-ek-r4-experiment-kit/examples/trimpot/","title":"Trimpot Analog Read","text":"<p>Use A1 to read a potentiometer.</p>"},{"location":"products/arduino-ek-r4-experiment-kit/examples/trimpot/#wiring","title":"Wiring","text":"<ul> <li>Wiper\u2192A1, ends\u21925V/GND</li> </ul>"},{"location":"products/arduino-ek-r4-experiment-kit/examples/trimpot/#code","title":"Code","text":"<pre><code>void setup() { Serial.begin(115200); }\n\nvoid loop() {\n  int v = analogRead(A1);\n  float pct = (v / 1023.0) * 100.0;\n  Serial.print(\"A1=\"); Serial.print(v); Serial.print(\" (~\");\n  Serial.print(pct, 1); Serial.println(\"%)\");\n  delay(200);\n}\n</code></pre>"},{"location":"products/arduino-ek-r4-experiment-kit/examples/ultrasonic/","title":"Ultrasonic Distance","text":"<p>Measure distance using HC\u2011SR04.</p>"},{"location":"products/arduino-ek-r4-experiment-kit/examples/ultrasonic/#wiring","title":"Wiring","text":"<ul> <li>TRIG\u2192D4, ECHO\u2192D7, VCC\u21925V, GND\u2192GND</li> </ul>"},{"location":"products/arduino-ek-r4-experiment-kit/examples/ultrasonic/#code","title":"Code","text":"<pre><code>const int TRIG = 4;\nconst int ECHO = 7;\n\nlong microsecondsToCm(long us) { return us / 29 / 2; }\n\nvoid setup() {\n  Serial.begin(115200);\n  pinMode(TRIG, OUTPUT);\n  pinMode(ECHO, INPUT);\n}\n\nvoid loop() {\n  digitalWrite(TRIG, LOW); delayMicroseconds(2);\n  digitalWrite(TRIG, HIGH); delayMicroseconds(10);\n  digitalWrite(TRIG, LOW);\n  long duration = pulseIn(ECHO, HIGH, 30000);\n  long cm = microsecondsToCm(duration);\n  Serial.print(cm); Serial.println(\" cm\");\n  delay(300);\n}\n</code></pre>"},{"location":"products/arduino-ek-r4-experiment-kit/setup/libraries/","title":"Libraries","text":"<ul> <li>Adafruit NeoPixel</li> <li>U8g2 / Adafruit SSD1306</li> <li>DHT sensor library</li> <li>IRremote</li> </ul>"},{"location":"products/arduino-ek-r4-experiment-kit/setup/quick-start/","title":"Quick Start","text":"<ol> <li>Install Arduino IDE 2.x</li> <li>Select Board: Arduino UNO R4 Minima</li> <li>Upload Blink</li> </ol>"},{"location":"products/arduino-ek-r4-experiment-kit/setup/quick-start/#pin-references","title":"Pin references","text":"<ul> <li>Servo D9 \u2022 Fan D10 \u2022 HC\u2011SR04 TRIG D4 / ECHO D7 \u2022 DHT11 D8 \u2022 NeoPixel D5 \u2022 LDR A0 \u2022 Pot A1 \u2022 Buzzer D11 \u2022 Button D12 \u2022 Switch A3 \u2022 LED D3</li> </ul>"},{"location":"products/microbit-neo-inventor-kit/","title":"Neo Inventor Kit for BBC Microbit","text":"<p>The Neo Inventor Kit for BBC Microbit is built to make hardware prototyping simple, fast, and frustration-free. Instead of spending time on wiring, checking connections, or guessing if components work, students can immediately focus on solving real-life problems.  </p> <p>With the BBC micro:bit at its core and a board full of pre-integrated sensors, actuators, displays, and Grove expansion ports, this kit empowers learners to build hands-on projects\u2014from smart devices to automation systems. Every module is ready to go, giving students the confidence that their hardware will work as expected so they can channel their creativity into coding and innovation.</p>"},{"location":"products/microbit-neo-inventor-kit/#why-choose-the-neo-inventor-kit-for-bbc-microbit","title":"Why Choose the Neo Inventor Kit for BBC Microbit?","text":"<ul> <li>\u26a1 Rapid Prototyping \u2013 Move from idea to working prototype in minutes, without breadboards or wiring headaches.  </li> <li>\u2705 Confidence Booster \u2013 Reliable, pre-tested components mean students can focus on building solutions, not debugging hardware.  </li> <li>\ud83c\udf0d Real-World Applications \u2013 Learn how to tackle meaningful problems in automation, environment, and IoT.  </li> <li>\ud83c\udf93 Progressive Learning \u2013 Start with block coding in MakeCode and seamlessly advance to Python.  </li> <li>\ud83d\udd0c Expandable Design \u2013 Four Grove-compatible ports (I2C, Digital, Analog) allow easy integration of external sensors and modules.  </li> </ul>"},{"location":"products/microbit-neo-inventor-kit/#built-in-modules","title":"Built-in Modules","text":"<p>The Neo Inventor Kit for BBC Microbit includes everything needed for interactive learning and prototyping:</p> Module Description Servo Moves servo motor to desired angles NeoPixel Displays colorful LED animations Fan Controls DC fan speed or on/off state DHT11 Reads temperature and humidity values LED Blinks and controls external LEDs IR Remote Receives signals from an IR remote OLED Displays text and graphics on screen LDR Detects ambient light intensity Ultrasonic Measures distance using sound waves Buzzer Produces tones and sound alerts Button Detects push button presses Switch Reads toggle switch on/off state Trimpot Reads analog values from a potentiometer <p>The Neo Inventor Kit for BBC Microbit isn\u2019t just a collection of parts\u2014it\u2019s a confidence-building invention platform. By ensuring the hardware simply works, it allows students and young innovators to imagine, design, and prototype solutions for the real world with clarity and speed.  </p>"},{"location":"products/microbit-neo-inventor-kit/troubleshooting/","title":"Troubleshooting","text":"<ul> <li>Board/cable/port, </li> <li>USB drivers </li> <li>Close other serial monitors; reset if needed</li> </ul>"},{"location":"products/microbit-neo-inventor-kit/examples/blink-led/","title":"Blink LED","text":"<p>The LED (Light Emitting Diode) is the simplest and most widely used electronic component for beginners. Blinking an LED is often called the \"Hello World\" of electronics\u2014it\u2019s the first step in learning how to control hardware with code.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/blink-led/#what-it-does","title":"What It Does","text":"<p>This program turns an LED ON and OFF repeatedly, creating a blinking effect. It helps students understand the basics of digital output control and how timing works in programming.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/blink-led/#real-world-applications","title":"Real-World Applications","text":"<p>Though simple, the principle of blinking an LED extends to many real-life systems:</p> <ul> <li>\ud83d\udca1 Indicators \u2013 Status lights on appliances, chargers, or devices.  </li> <li>\ud83d\udea6 Traffic Lights \u2013 Signaling patterns for vehicles and pedestrians.  </li> <li>\ud83c\udfe0 Smart Home Devices \u2013 Visual alerts for notifications or alarms.  </li> <li>\ud83d\udd0b Battery &amp; Power Indicators \u2013 Showing charging or low-battery states.  </li> <li>\ud83d\udd79\ufe0f Learning Foundation \u2013 Forms the basis for controlling more advanced outputs like motors, displays, and sensors.  </li> </ul> <p>Mastering this exercise builds the foundation for all digital control projects.</p> <p>\u2705 Once you can blink an LED, you\u2019ve taken the first step toward controlling any electronic component with code.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/blink-led/#code","title":"Code","text":""},{"location":"products/microbit-neo-inventor-kit/examples/buttons-switch/","title":"Button Input","text":"<p>Buttons are the simplest way to provide user input to your projects. A momentary button closes the circuit only while pressed, allowing your code to respond to taps, presses, or long holds.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/buttons-switch/#what-it-does","title":"What It Does","text":"<p>This example reads the state of a button and shows how your program can respond when the button is pressed. It introduces the concept of digital input and forms the basis for interactive projects.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/buttons-switch/#real-world-applications","title":"Real-World Applications","text":"<p>Buttons are everywhere in electronics, from toys to industrial systems. With button inputs, students can create:</p> <ul> <li>\ud83c\udfae Game Controls \u2013 Simple joysticks, trigger buttons, or start/stop inputs.  </li> <li>\ud83d\udd14 Doorbells &amp; Buzzers \u2013 Triggering a sound or notification.  </li> <li>\ud83c\udfe0 Smart Home Controls \u2013 Light switches, fan toggles, or appliance triggers.  </li> <li>\ud83e\udd16 Robotics \u2013 Manual override or reset buttons.  </li> <li>\ud83e\uddea Learning Experiments \u2013 Teach the basics of logic, inputs, and event-driven programming.  </li> </ul> <p>Using a button, students begin to understand how human interaction drives digital systems.</p> <p>\u2705 Once you can read a button press, you can extend it to control LEDs, buzzers, motors, or even start whole projects with a single press.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/buttons-switch/#code","title":"Code","text":""},{"location":"products/microbit-neo-inventor-kit/examples/buzzer-tones/","title":"Buzzer","text":"<p>The passive buzzer can generate tones of different pitches and durations. By controlling frequency, you can play simple sounds, melodies, or alerts in your projects.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/buzzer-tones/#what-it-does","title":"What It Does","text":"<p>This example makes the buzzer play tones at different frequencies, allowing you to create beeps or simple music. It\u2019s a fun way to combine coding with sound output.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/buzzer-tones/#real-world-applications","title":"Real-World Applications","text":"<p>Buzzers are found in almost every electronic system where sound feedback is needed:</p> <ul> <li>\ud83d\udd14 Alarms &amp; Alerts \u2013 Door alarms, smoke detectors, and timers.  </li> <li>\ud83c\udfb5 Musical Projects \u2013 Simple games, learning tools, or electronic instruments.  </li> <li>\ud83d\udd79\ufe0f Interactive Systems \u2013 Sound feedback for buttons or sensors.  </li> <li>\ud83c\udfe0 Appliances \u2013 Microwave beeps, washing machine alerts, or reminders.  </li> <li>\ud83e\udd16 Robotics \u2013 Sound signals for status updates or warnings.  </li> </ul> <p>With a buzzer, students learn how to add sound feedback that makes their prototypes more interactive.</p> <p>\u2705 Once you can play tones, try creating sound effects, melodies, or alarms that respond to sensor inputs, making your projects more dynamic.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/buzzer-tones/#code","title":"Code","text":""},{"location":"products/microbit-neo-inventor-kit/examples/dht11/","title":"Temperature &amp; Humidity","text":"<p>The DHT11 sensor allows your projects to measure ambient temperature and humidity. It is one of the most commonly used sensors in DIY electronics and IoT, helping students connect code with real-world environmental data.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/dht11/#what-it-does","title":"What It Does","text":"<p>This example reads the current humidity from the DHT11 sensor and displays the values. It gives you a simple way to monitor your surroundings and respond to changes in the environment.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/dht11/#real-world-applications","title":"Real-World Applications","text":"<p>Temperature and humidity monitoring is an essential part of many real-life systems, such as:</p> <ul> <li>\ud83c\udfe0 Smart Homes \u2013 Automating fans, air conditioners, and humidifiers.  </li> <li>\ud83c\udf31 Smart Agriculture \u2013 Monitoring greenhouse or soil conditions to protect crops.  </li> <li>\ud83c\udf0d Weather Stations \u2013 Collecting local climate data for learning or prediction.  </li> <li>\ud83c\udfe5 Health &amp; Safety \u2013 Ensuring comfortable and safe indoor environments.  </li> <li>\ud83d\udce6 Logistics &amp; Storage \u2013 Monitoring warehouses for sensitive goods like food or medicine.  </li> </ul> <p>By using the DHT11, students learn how data from the environment can trigger real-world actions and innovations.</p> <p>\u2705 With the DHT11 sensor, students can build projects that sense, respond, and adapt to environmental conditions, making their prototypes more intelligent and practical.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/dht11/#try-it-yourself-temperature-humidity-example","title":"Try It Yourself \u2013 Temperature &amp; Humidity Example","text":""},{"location":"products/microbit-neo-inventor-kit/examples/dht11/#code","title":"Code","text":""},{"location":"products/microbit-neo-inventor-kit/examples/fan/","title":"Motor with Fan","text":"<p>The DC motor with fan demonstrates how to control rotational motion using code. By turning the motor ON or OFF (and adjusting speed if supported), students can explore the basics of automation, airflow, and motion control.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/fan/#what-it-does","title":"What It Does","text":"<p>This example drives a small fan connected to the motor, increasing and decreasing the speed in a controlled sequence. It introduces the concept of using code to control mechanical systems.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/fan/#real-world-applications","title":"Real-World Applications","text":"<p>DC motors are everywhere in everyday life and engineering. They can be used in:</p> <ul> <li>\ud83c\udf2c\ufe0f Cooling Systems \u2013 Fans for computers, appliances, and smart devices.  </li> <li>\ud83d\ude97 Automotive Applications \u2013 Motors in car windows, mirrors, and ventilation systems.  </li> <li>\ud83c\udfe0 Smart Home Projects \u2013 Air purifiers, exhaust fans, or simple household automation.  </li> <li>\ud83e\udd16 Robotics \u2013 Wheels, conveyor belts, and moving mechanisms.  </li> <li>\ud83e\uddea STEM Prototypes \u2013 Demonstrating airflow, motion, and energy conversion concepts.  </li> </ul> <p>Controlling a motor gives students confidence to build practical prototypes that integrate both electronics and mechanics.</p> <p>\u2705 With a motor and fan, students can begin experimenting with movement, airflow, and automation\u2014skills that extend directly into robotics, IoT devices, and real-world engineering solutions.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/fan/#code","title":"Code","text":""},{"location":"products/microbit-neo-inventor-kit/examples/ir-remote/","title":"IR Remote Receiver","text":"<p>The IR (Infrared) Receiver allows your project to read signals from a standard IR remote control. Each button on the remote sends a unique digital code, which your program can decode and use to trigger actions.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/ir-remote/#what-it-does","title":"What It Does","text":"<p>This example listens for incoming signals from an IR remote and displays the decoded button codes. Once you know the code for each button, you can program the micro:bit to perform specific tasks whenever that button is pressed.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/ir-remote/#real-world-applications","title":"Real-World Applications","text":"<p>Infrared communication is used widely in everyday devices. With the IR remote and receiver, students can learn about wireless control systems such as:</p> <ul> <li>\ud83d\udcfa Consumer Electronics \u2013 TVs, projectors, and set-top boxes.  </li> <li>\ud83c\udfe0 Smart Home Devices \u2013 Remote-controlled fans, lights, and appliances.  </li> <li>\ud83d\ude97 Toys &amp; Models \u2013 Remote-controlled cars and robots.  </li> <li>\ud83c\udfae Custom Controllers \u2013 Build your own remote-controlled prototypes.  </li> <li>\ud83d\udce1 Learning Tool \u2013 Understand how data is transmitted wirelessly using light signals.  </li> </ul> <p>By decoding IR signals, students get hands-on experience with remote control technology and can extend it into custom automation projects.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/ir-remote/#try-it-yourself-ir-decode-example","title":"Try It Yourself \u2013 IR Decode Example","text":"<p>\u2705 Once you\u2019ve learned to decode button presses, you can map each button to control motors, LEDs, fans, or even trigger full projects with just a click of the remote.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/ir-remote/#code","title":"Code","text":""},{"location":"products/microbit-neo-inventor-kit/examples/ldr/","title":"LDR Light Sensor","text":"<p>An LDR (Light Dependent Resistor), also called a photoresistor, changes its resistance based on the amount of light falling on it. This allows your micro:bit projects to measure brightness and respond to changes in ambient light.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/ldr/#what-it-does","title":"What It Does","text":"<p>The LDR outputs a varying voltage depending on light intensity. Your program can read this as an analog value (ranging from dark = low value to bright = high value) and use it to trigger actions such as turning on lights or adjusting displays.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/ldr/#real-world-applications","title":"Real-World Applications","text":"<p>Light sensors are used in countless real-world systems, such as:</p> <ul> <li>\ud83d\udca1 Automatic Street Lights \u2013 Turning on at night and off in the morning.  </li> <li>\ud83d\udcf1 Smartphones \u2013 Adjusting screen brightness based on ambient light.  </li> <li>\ud83c\udfe0 Smart Homes \u2013 Controlling curtains, lamps, or garden lighting automatically.  </li> <li>\ud83e\udd16 Robotics \u2013 Light-following robots or obstacle detection.  </li> <li>\ud83d\udd12 Security Systems \u2013 Detecting changes in light for alarms or monitoring.  </li> </ul> <p>Using an LDR, students learn how to make their prototypes react intelligently to environmental light conditions.</p> <p>\u2705 With the LDR, you can build projects that respond to light\u2014from night lamps and alarms to smart energy-saving devices.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/ldr/#code","title":"Code","text":""},{"location":"products/microbit-neo-inventor-kit/examples/neopixel/","title":"NeoPixel Ring Patterns","text":"<p>The NeoPixel Ring is a circle of programmable RGB LEDs that can display millions of colors. By controlling each LED individually, you can create stunning light patterns, animations, and visual feedback for your projects.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/neopixel/#what-it-does","title":"What It Does","text":"<p>This example animates the NeoPixel ring by cycling through different colors and patterns. You can easily modify the code to create effects such as rainbow fades, spinning lights, pulsing colors, or event-based indicators.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/neopixel/#real-world-applications","title":"Real-World Applications","text":"<p>NeoPixels are not just for decoration\u2014they are powerful tools for:</p> <ul> <li>\ud83c\udfa8 Creative Displays \u2013 Interactive light shows, wearables, and art installations.  </li> <li>\ud83d\udcca Data Visualization \u2013 Use colors and patterns to represent sensor readings (temperature, distance, etc.).  </li> <li>\ud83d\udea6 Status Indicators \u2013 Show system states like ON/OFF, warnings, or levels (battery, signal, etc.).  </li> <li>\ud83d\udd79\ufe0f Gaming &amp; Interaction \u2013 Feedback lights for buttons, scoring systems, or timers.  </li> <li>\ud83e\udd16 Robotics \u2013 Eye patterns, movement indicators, or robot \u201cexpressions.\u201d  </li> </ul> <p>With NeoPixels, you can make your prototypes both functional and visually engaging.</p> <p>\u2705 Experiment with different color patterns and animations to turn your projects into interactive, eye-catching experiences.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/neopixel/#code","title":"Code","text":""},{"location":"products/microbit-neo-inventor-kit/examples/oled-hello/","title":"OLED Display","text":"<p>The OLED display lets your projects show text, numbers, and simple graphics directly on the screen. This makes it easy to give visual feedback, display sensor readings, or create interactive menus for your prototypes.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/oled-hello/#what-it-does","title":"What It Does","text":"<p>This example writes the text \u201cSTEM Smart Labs\u201d on the OLED display. It\u2019s the simplest way to confirm your display is working and introduces the basics of outputting text on screen.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/oled-hello/#real-world-applications","title":"Real-World Applications","text":"<p>OLED displays are used widely in devices where clear, low-power visual output is needed. With the OLED in this kit, students can explore:</p> <ul> <li>\ud83d\udcca Sensor Dashboards \u2013 Show live temperature, humidity, or distance values.  </li> <li>\ud83d\udd14 Status Indicators \u2013 Display ON/OFF states, error messages, or progress bars.  </li> <li>\ud83c\udfe0 Smart Devices \u2013 Provide user interfaces for IoT projects like timers or reminders.  </li> <li>\ud83e\udd16 Robotics \u2013 Show robot modes, directions, or instructions.  </li> <li>\ud83c\udfae Mini Games &amp; Interfaces \u2013 Create text-based games or menus for interactive projects.  </li> </ul> <p>The OLED display transforms projects from invisible logic into visible, interactive systems.</p> <p>\u2705 Once you can display \u201cSTEM Smart Labs\u201d try showing sensor values, scrolling messages, or even icons and graphics to make your projects more engaging and interactive.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/oled-hello/#code","title":"Code","text":""},{"location":"products/microbit-neo-inventor-kit/examples/servo-sweep/","title":"Servo Motor","text":"<p>Servos are simple motors that can rotate to specific angles, making them perfect for projects where controlled movement is required.  In this example, you will learn how to sweep a servo back and forth smoothly.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/servo-sweep/#what-it-does","title":"What It Does","text":"<p>The program sends signals to the servo motor, moving it gradually from one side to the other and back again. This creates a continuous sweeping motion, which can be adapted for many practical applications.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/servo-sweep/#real-world-applications","title":"Real-World Applications","text":"<p>Servos are widely used in everyday systems and prototypes, including:</p> <ul> <li>\ud83e\udd16 Robotics \u2013 Arm joints, grippers, and head movements.  </li> <li>\ud83c\udfe0 Smart Home Devices \u2013 Automated curtains, window openers, and locks.  </li> <li>\ud83d\ude97 Automotive Systems \u2013 Steering mechanisms in small robotic cars or models.  </li> <li>\ud83c\udfae Interactive Projects \u2013 Pan/tilt camera mounts, animatronics, and hobby projects.  </li> <li>\u2708\ufe0f Aerospace Models \u2013 Controlling rudders, flaps, and control surfaces in model aircraft.  </li> </ul> <p>By mastering servo control, students can design prototypes that involve movement, automation, and interaction with the physical world.</p> <p>\u2705 Once you understand how to sweep a servo, you can expand this idea into real-world prototypes\u2014from robotic arms to smart devices that respond to user input.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/servo-sweep/#code","title":"Code","text":""},{"location":"products/microbit-neo-inventor-kit/examples/switch/","title":"Switch","text":"<p>A switch is one of the most basic input components in electronics. Unlike a button that is momentary, a switch stays in its position\u2014ON or OFF\u2014until you change it. This makes it ideal for controlling power, modes, or states in your projects.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/switch/#what-it-does","title":"What It Does","text":"<p>This example reads the state of a switch and shows how your program can react depending on whether the switch is ON or OFF. It introduces the concept of toggle inputs, which are widely used in real devices.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/switch/#real-world-applications","title":"Real-World Applications","text":"<p>Switches are everywhere in daily life and technology. Some common uses include:</p> <ul> <li>\ud83d\udca1 Power Control \u2013 Light switches, appliance ON/OFF switches.  </li> <li>\ud83c\udfe0 Smart Homes \u2013 Controlling fans, lights, or connected devices.  </li> <li>\ud83c\udfae Mode Selection \u2013 Changing between game modes or difficulty levels.  </li> <li>\ud83e\udd16 Robotics \u2013 Enabling/disabling features, reset switches, or safety locks.  </li> <li>\ud83e\uddea STEM Projects \u2013 Teaching logic control, toggling states, or acting as a manual override.  </li> </ul> <p>With a switch, students learn how devices store state and how physical inputs can control digital systems.</p> <p>\u2705 Once you can read a switch input, you can use it to turn LEDs on/off, change motor states, toggle alarms, or even switch between entire program modes.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/switch/#code","title":"Code","text":""},{"location":"products/microbit-neo-inventor-kit/examples/trimpot/","title":"Trimpot","text":"<p>A trimpot (trimmer potentiometer) is a type of variable resistor. By turning its knob, you change the resistance, which the micro:bit reads as an analog value. This allows you to create projects where input can vary smoothly rather than being just ON or OFF.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/trimpot/#what-it-does","title":"What It Does","text":"<p>This example reads the analog value from the trimpot and shows how it changes as you rotate it. The output ranges from minimum to maximum, depending on the position of the knob.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/trimpot/#real-world-applications","title":"Real-World Applications","text":"<p>Potentiometers and trimpots are used in many devices where adjustable control is needed:</p> <ul> <li>\ud83d\udd0a Volume Knobs \u2013 Adjust sound levels in speakers and amplifiers.  </li> <li>\ud83d\udca1 Light Dimmers \u2013 Smooth control of brightness.  </li> <li>\ud83d\udd79\ufe0f Control Interfaces \u2013 Joysticks, sliders, or adjustable inputs.  </li> <li>\u2699\ufe0f Calibration Tools \u2013 Fine-tuning circuits or sensor values.  </li> <li>\ud83c\udfae STEM Projects \u2013 Controlling motors, LEDs, or variables in code interactively.  </li> </ul> <p>Using analog inputs like a trimpot helps students understand how to handle continuous values in coding.</p> <p>\u2705 Once you can read analog values, you can use the trimpot to control LEDs, motor speed, buzzer pitch, or even act as a game controller input.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/trimpot/#code","title":"Code","text":""},{"location":"products/microbit-neo-inventor-kit/examples/ultrasonic/","title":"Ultrasonic Sensor","text":"<p>The Ultrasonic sensor measures distance by sending out sound waves and timing how long they take to bounce back from an object. It\u2019s a simple way to give your projects the ability to \u201csense\u201d the world around them.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/ultrasonic/#what-it-does","title":"What It Does","text":"<p>This example measures the distance to an object in front of the sensor and reports the value. By using sound instead of light, the ultrasonic sensor works reliably even in dark conditions.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/ultrasonic/#real-world-applications","title":"Real-World Applications","text":"<p>Ultrasonic sensors are widely used in systems where detecting distance or obstacles is important:</p> <ul> <li>\ud83d\ude97 Parking Assistance \u2013 Reverse sensors in cars to avoid collisions.  </li> <li>\ud83e\udd16 Robotics \u2013 Obstacle avoidance for autonomous robots.  </li> <li>\ud83c\udfe0 Smart Home Projects \u2013 Automatic water tank level monitoring or security systems.  </li> <li>\ud83c\udfed Industrial Automation \u2013 Detecting object positions on conveyor belts.  </li> <li>\ud83c\udfae Interactive Projects \u2013 Distance-based triggers for games or installations.  </li> </ul> <p>With an ultrasonic sensor, students can build prototypes that react to their environment and move toward real-world automation.</p> <p>\u2705 Once you can measure distance, you can extend this into projects like robot navigation, smart alarms, or level detectors.</p>"},{"location":"products/microbit-neo-inventor-kit/examples/ultrasonic/#code","title":"Code","text":""},{"location":"products/microbit-neo-inventor-kit/setup/quick-start/","title":"Setup","text":"<p>The Neo Inventor Kit for BBC Microbit works seamlessly with the official Microsoft MakeCode Editor. MakeCode provides a friendly, browser-based environment where you can program the micro:bit using Blocks, JavaScript, or Python\u2014making it suitable for both beginners and advanced learners.</p>"},{"location":"products/microbit-neo-inventor-kit/setup/quick-start/#prepare-your-hardware","title":"Prepare Your Hardware","text":"<ol> <li>Insert your BBC micro:bit into the slot on the Neo Inventor Kit board.  </li> <li>Connect the micro:bit to your computer using a USB cable.  </li> <li>The micro:bit will appear on your computer as a USB drive.</li> </ol> <p>\u2705 With MakeCode, the Neo Inventor Kit for BBC Microbit becomes a fast, flexible, and student-friendly platform for electronics, coding, and real-world problem solving.  </p>"}]}